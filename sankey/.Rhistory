ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = subset(mpg, class != "2seater"), aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth()
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth(aes(colour=NA, shape = NA), method = 'lm')
setwd("/Users/coripenrod/Documents/UNLV/Year4/NMF_differentiation")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
con_mat <- read_tsv("matrix_connections.tsv")
x <- as.matrix(con_mat[,-1])
matCSC <- as(x, "dgCMatrix")
num_labels = 10
num_runs = 100
model <- nmf(matCSC, k = num_labels, maxit = num_runs, tol = 1e-100)
# saveRDS(model,paste0("model_",num_labels,".rds"))
colnames(model$h) <- colnames(matCSC)
rownames(model$h) <- 1:num_labels
pheatmap(t(model$h), scale = "row", border_color = NA, cluster_rows = F,
cluster_cols = T, fontsize = 14,
main = paste0("H matrix k=",num_labels))
model$h
model$w
colnames(model$w) <- 1:num_labels
model_w
model$w
colnames(DF)[apply(DF,1,which.max)]
colnames(model$w)[apply(model$w,1,which.max)]
data.frame(region = rownames(model$w), label = colnames(model$w)[apply(model$w,1,which.max)])
con_mat <- read_tsv("matrix_connections.tsv")
View(x)
View(con_mat)
data.frame(region = con_mat$region, label = colnames(model$w)[apply(model$w,1,which.max)])
con_mat %>% separate(region,c(chr,pos1,pos2),sep = ':-')
con_mat %>% separate(region,c("chr","pos1","pos2"),sep = ':-')
con_mat %>% separate(region,c("chr","pos1","pos2"),sep = ':')
con_mat %>% separate(region,c("chr","pos1","pos2"),sep = '[:-]')
con_mat <- con_mat %>% separate(region,c("chr","pos1","pos2"),sep = '[:-]')
data.frame(chr = con_mat$chr, pos1 = con_mat$pos1, pos2 = con_mat$pos2, label = colnames(model$w)[apply(model$w,1,which.max)])
all_labelled <- data.frame(chr = con_mat$chr, pos1 = con_mat$pos1, pos2 = con_mat$pos2, label = colnames(model$w)[apply(model$w,1,which.max)])
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:-_]')
con_mat <- read_tsv("matrix_connections.tsv")
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:-_]')
con_mat
con_mat <- read_tsv("matrix_connections.tsv")
con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
all_labelled <- data.frame(type = con_mat$type, chr = con_mat$chr, pos1 = con_mat$pos1, pos2 = con_mat$pos2, label = colnames(model$w)[apply(model$w,1,which.max)])
subset(all_labelled, type == 'h1')
h1_labelled <- subset(all_labelled, type == 'h1')[,2:5]
endo_labelled <- subset(all_labelled, type == 'endo')[,2:5]
View(endo_labelled)
View(h1_labelled)
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
con_mat <- read_tsv("matrix_connections.tsv")
x <- as.matrix(con_mat[,-1])
rownames(x) <- con_mat$region
matCSC <- as(x, "dgCMatrix")
num_labels = 3
num_runs = 100
model <- nmf(matCSC, k = num_labels, maxit = num_runs, tol = 1e-100)
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
all_labelled <- data.frame(type = con_mat$type, chr = con_mat$chr, pos1 = con_mat$pos1, pos2 = con_mat$pos2,
label = colnames(model$w)[apply(model$w,1,which.max)])
con_mat
colnames(model$w)[apply(model$w,1,which.max)]
colnames(model$w)
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
con_mat <- read_tsv("matrix_connections.tsv")
x <- as.matrix(con_mat[,-1])
rownames(x) <- con_mat$region
matCSC <- as(x, "dgCMatrix")
num_labels = 3
num_runs = 100
model <- nmf(matCSC, k = num_labels, maxit = num_runs, tol = 1e-100)
# ONLY LOCALLY, NON DEV VERSION OF RcppML
colnames(model$h) <- colnames(matCSC)
rownames(model$h) <- 1:num_labels
# ONLY LOCALLY, NON DEV VERSION OF RcppML
colnames(model$w) <- 1:num_labels
rownames(model$w) <- rownames(matCSC)
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
all_labelled <- data.frame(type = con_mat$type, chr = con_mat$chr, pos1 = con_mat$pos1, pos2 = con_mat$pos2,
label = colnames(model$w)[apply(model$w,1,which.max)])
h1_labelled <- subset(all_labelled, type == 'h1')[,2:5]
endo_labelled <- subset(all_labelled, type == 'endo')[,2:5]
write_tsv(h1_labelled, "h1_labelled.bed", col_names = F)
write_tsv(endo_labelled, "endo_labelled.bed", col_names = F)
setwd("~/Documents/UNLV/Year4/nmf3D/sankey")
library(tidyverse)
library(UpSetR)
library(networkD3)
net <- read_tsv("network.tsv", col_names = c('source','target'))
network <- as_tibble(table(net[,2:3]))
network <- as_tibble(table(net)
)
View(network)
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
View(network)
network$H1 <- as.numeric(network$H1)
network$Endo <- as.numeric(network$Endo)
library(networkD3)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = 1:3,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 14, nodeWidth = 5)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = network,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 14, nodeWidth = 5)
nodes = data.frame("name" =
c("1","2","3")
)
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 14, nodeWidth = 5)
# sn <- htmlwidgets::prependContent(sn, htmltools::tags$h1("HERVH Candidate Loci"))
sn <- htmlwidgets::prependContent(sn, htmltools::HTML('<h1 style="font-family:Arial, sans-serif;font-weight:bold;margin-bottom:0;text-align:center">HERVH Candidate Loci</h1><div style="position:relative;padding: 10px 20px 0px 20px;margin-bottom:50px;">
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;left:0;">Naive hESC</p>
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;right:0;">Primed hESC</p>
</div>'))
# htmlwidgets::sizingPolicy(padding = 10, browser.fill = TRUE)
# sn$sizingPolicy$viewer$fill <- FALSE
sn$sizingPolicy$browser$fill <- F
sn$sizingPolicy$browser$defaultWidth <- 400
# you save it as an html
saveNetwork(sn, "sn_hervh_candidate_loci.html")
library(webshot)
sn
sn
colnames(network) <- c("source", "target")
setwd("~/Documents/UNLV/Year4/nmf3D/sankey")
library(tidyverse)
library(UpSetR)
library(networkD3)
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
colnames(network) <- c("source", "target")
network$source <- as.numeric(network$source)
network$target <- as.numeric(network$target)
nodes = data.frame("name" =
c("1","2","3")
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 14, nodeWidth = 5)
network
nodes
sn
# sn <- htmlwidgets::prependContent(sn, htmltools::tags$h1("HERVH Candidate Loci"))
sn <- htmlwidgets::prependContent(sn, htmltools::HTML('<h1 style="font-family:Arial, sans-serif;font-weight:bold;margin-bottom:0;text-align:center">HERVH Candidate Loci</h1><div style="position:relative;padding: 10px 20px 0px 20px;margin-bottom:50px;">
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;left:0;">Naive hESC</p>
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;right:0;">Primed hESC</p>
</div>'))
# htmlwidgets::sizingPolicy(padding = 10, browser.fill = TRUE)
# sn$sizingPolicy$viewer$fill <- FALSE
sn$sizingPolicy$browser$fill <- F
sn$sizingPolicy$browser$defaultWidth <- 400
# you save it as an html
saveNetwork(sn, "sn_hervh_candidate_loci.html")
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
network
colnames(network) <- c("source", "target", "value")
network$source <- as.numeric(network$source)
network$target <- as.numeric(network$target)
nodes = data.frame("name" =
c("1","2","3")
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 14, nodeWidth = 5)
sn
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 14)
target
network
nodes
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
network
# you save it as an html
saveNetwork(sn, "sn_hervh_candidate_loci.html")
dev.off()
dev.off()
dev.off()
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
length(unique(c(network$source,network$target)))
length(nodes$name)
nodes = data.frame("name" =
c("a","b","c")
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
sn
library("curl")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
nodes = data.frame("name" =
c("a","b","c"), stringsAsFactors = F
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
colnames(network) <- c("source", "target", "value")
network$source <- as.numeric(network$source)
network$target <- as.numeric(network$target)
network$value <- as.numeric(network$value)
nodes = data.frame("name" =
c("a","b","c"), stringsAsFactors = F
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
network
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
as.data.frame(network)
z <- as.data.frame(network)
# Plot
sn <- sankeyNetwork(Links = z, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
View(net)
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
colnames(network) <- c("source", "target", "value")
network$source <- as.numeric(network$source)
network$target <- as.numeric(network$target)
network$value <- as.numeric(network$value)
# MUST BE ZERO-INDEXED
network$source <- network$source - 1
network$target <- network$target - 1
nodes = data.frame("name" =
c("a","b","c"), stringsAsFactors = F
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = z, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
# Plot
sn <- sankeyNetwork(Links = network, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
network
# Plot
sn <- sankeyNetwork(Links = data.frame(network), Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
data.frame(network)
library(tidyverse)
library(UpSetR)
library(networkD3)
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
colnames(network) <- c("source", "target", "value")
network$source <- as.numeric(network$source)
network$target <- as.numeric(network$target)
network$value <- as.numeric(network$value)
# MUST BE ZERO-INDEXED
network$source <- network$source - 1
network$target <- network$target - 1
nodes = data.frame("name" =
c("a","b","c"), stringsAsFactors = F
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = data.frame(network), Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
dev.off()
dev.off()
# Plot
sn <- sankeyNetwork(Links = data.frame(network), Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
nodes
data.frame(network)
library(tidyverse)
library(networkD3)
url <- "https://results.aec.gov.au/20499/Website/External/SenateDopDownload-20499.zip"
mytempfile <- tempfile(fileext = ".zip")
download.file(url = url, destfile = mytempfile)
mytempdir <- tempdir()
unzip(mytempfile, exdir = mytempdir)
unlink(mytempfile)
SenatePreferences <-
list.files(mytempdir, pattern = ".csv", full.names = TRUE) %>%
map_dfr(read_csv)
unlink(mytempdir, recursive = TRUE)
cleaned <-
SenatePreferences %>%
as_tibble() %>%
filter(State == "ACT") %>%
filter(!Surname %in% c("Exhausted", "Gain/Loss")) %>%
mutate(Name = paste(Surname, GivenNm)) %>%
mutate(NameNode = paste(Name, Count)) %>%
select(NameNode, Name, Ticket, round = Count, Status, VoteTransferred) %>%
group_by(Name) %>%
arrange(round) %>%
filter(row_number() <= min(which(Status == "Excluded" | row_number() == n()))) %>%
ungroup() %>%
mutate(Node = row_number() - 1)
links <-
cleaned %>%
mutate(Source = Node) %>%
group_by(Name) %>%
mutate(Target = Source %>% lead()) %>%
ungroup() %>%
filter(!is.na(Source) & !is.na(Target)) %>%
select(Source, Target, Name, VoteTransferred)
nodes <-
cleaned %>%
select(NameNode, Name, Node)
sankeyNetwork(Links = links, Nodes = nodes, Source = 'Source',
Target = 'Target', Value = 'VoteTransferred', NodeID = 'NameNode',
LinkGroup = 'Name', fontSize = 12)
links
nodes
links
nodes
nodes = data.frame("name" =
c("a","b","c"),
"node" = 0:2,stringsAsFactors = F
)
names(network) = c("source", "target", "value")
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
colnames(network) <- c("source", "target", "value")
network$source <- as.numeric(network$source)
network$target <- as.numeric(network$target)
network$value <- as.numeric(network$value)
# MUST BE ZERO-INDEXED
network$source <- network$source - 1
network$target <- network$target - 1
nodes = data.frame("name" =
c("a","b","c"),
"node" = 0:2,stringsAsFactors = F
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = data.frame(network), Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
# sn <- htmlwidgets::prependContent(sn, htmltools::tags$h1("HERVH Candidate Loci"))
sn <- htmlwidgets::prependContent(sn, htmltools::HTML('<h1 style="font-family:Arial, sans-serif;font-weight:bold;margin-bottom:0;text-align:center">HERVH Candidate Loci</h1><div style="position:relative;padding: 10px 20px 0px 20px;margin-bottom:50px;">
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;left:0;">Naive hESC</p>
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;right:0;">Primed hESC</p>
</div>'))
# htmlwidgets::sizingPolicy(padding = 10, browser.fill = TRUE)
# sn$sizingPolicy$viewer$fill <- FALSE
sn$sizingPolicy$browser$fill <- F
# Plot
sn <- sankeyNetwork(Links = data.frame(network), Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name")
sankeyNetwork(Links = links, Nodes = nodes, Source = 'Source',
Target = 'Target', Value = 'VoteTransferred', NodeID = 'NameNode',
LinkGroup = 'Name', fontSize = 12)
library(tidyverse)
library(networkD3)
url <- "https://results.aec.gov.au/20499/Website/External/SenateDopDownload-20499.zip"
mytempfile <- tempfile(fileext = ".zip")
download.file(url = url, destfile = mytempfile)
mytempdir <- tempdir()
unzip(mytempfile, exdir = mytempdir)
unlink(mytempfile)
SenatePreferences <-
list.files(mytempdir, pattern = ".csv", full.names = TRUE) %>%
map_dfr(read_csv)
unlink(mytempdir, recursive = TRUE)
cleaned <-
SenatePreferences %>%
as_tibble() %>%
filter(State == "ACT") %>%
filter(!Surname %in% c("Exhausted", "Gain/Loss")) %>%
mutate(Name = paste(Surname, GivenNm)) %>%
mutate(NameNode = paste(Name, Count)) %>%
select(NameNode, Name, Ticket, round = Count, Status, VoteTransferred) %>%
group_by(Name) %>%
arrange(round) %>%
filter(row_number() <= min(which(Status == "Excluded" | row_number() == n()))) %>%
ungroup() %>%
mutate(Node = row_number() - 1)
links <-
cleaned %>%
mutate(Source = Node) %>%
group_by(Name) %>%
mutate(Target = Source %>% lead()) %>%
ungroup() %>%
filter(!is.na(Source) & !is.na(Target)) %>%
select(Source, Target, Name, VoteTransferred)
nodes <-
cleaned %>%
select(NameNode, Name, Node)
sankeyNetwork(Links = links, Nodes = nodes, Source = 'Source',
Target = 'Target', Value = 'VoteTransferred', NodeID = 'NameNode',
LinkGroup = 'Name', fontSize = 12)
sankeyNetwork(Links = links, Nodes = nodes, Source = 'Source',
Target = 'Target', Value = 'VoteTransferred', NodeID = 'NameNode',
LinkGroup = 'Name', fontSize = 12)
ibrary(networkD3)
library(networkD3)
edges <- read.csv("https://raw.githubusercontent.com/kilimba/data/master/infection_flows.csv",stringsAsFactors = FALSE)
nodes = data.frame(ID = unique(c(edges$Source, edges$Target)), stringsAsFactors = FALSE)
edges$Source <- match(edges$Source, nodes$ID) - 1
edges$Target <- match(edges$Target, nodes$ID) - 1
sankeyNetwork(Links = edges, Nodes = nodes,
Source = "Source", Target = "Target",
Value = "Value", NodeID = "ID",
width = 700, fontSize = 12, nodeWidth = 30)
edges <- read.csv("https://raw.githubusercontent.com/kilimba/data/master/infection_flows.csv",stringsAsFactors = FALSE)
nodes = data.frame(ID = unique(c(edges$Source, edges$Target)), stringsAsFactors = FALSE)
edges$Source <- match(edges$Source, nodes$ID) - 1
edges$Target <- match(edges$Target, nodes$ID) - 1
sankeyNetwork(Links = edges, Nodes = nodes,
Source = "Source", Target = "Target",
Value = "Value", NodeID = "ID",
width = 700, fontSize = 12, nodeWidth = 30)
