color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ylim(20,30) +
geom_smooth(hwy~displ+class+drv, method = 'lm')
?geom_smooth
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ylim(20,30) +
geom_smooth(aes(colour=NA, shape = NA), method = 'lm')
ggplot(data = mpg, aes(x = <PICK COL>, y = <PICK COL>)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = subset(mpg, class != "2seater"), aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth()
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth(aes(colour=NA, shape = NA), method = 'lm')
setwd("~/Documents/UNLV/Year4/nmf3D/choose_top_results/")
library(tidyverse)
library(ggsignif)
total_int <- read_tsv("nmf3D_network_all.bed", col_names = F, col_types = 'ccccccccc')
H1_present <- total_int[total_int$X4 != '.',1:4]
H1_only <- total_int[total_int$X8 == '.',1:4]
endo_only <- total_int[total_int$X4 == '.',5:8]
endo_present <- total_int[total_int$X8 != '.',5:8]
colnames(H1_present) <- c("chr", "pos1", "pos2", "label")
colnames(endo_present) <- c("chr", "pos1", "pos2", "label")
colnames(H1_only) <- c("chr", "pos1", "pos2", "label")
colnames(endo_only) <- c("chr", "pos1", "pos2", "label")
# RAW COUNT NORMALIZATION
exp_data_raw <- read_csv("../expression/GSE75748_bulk_cell_type_ec.csv")
exp_data <- round(exp_data_raw[,c(2,3,4,5,9,10)])
meta <- cbind.data.frame(cell_type = c(rep("H1",4),"DEC","DEC"))
rownames(meta) <- colnames(exp_data)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = exp_data, colData = meta, design = ~ cell_type)
dds <- estimateSizeFactors(dds)
normalized_counts <- data.frame(counts(dds, normalized=TRUE))
normalized_counts$gene <- exp_data_raw$gene
normalized_counts <- normalized_counts %>% rowwise() %>%
mutate(mean_H1 = mean(c(H1_rep1,H1_rep2,H1_rep3,H1_rep4)),
mean_DEC =mean(c(DEC_rep1,DEC_rep2)))
library(GenomicRanges)
library(AnnotationHub)
get_overlaps <- function(df, gene_exp) {
if (!exists("gc_db")) {
ah <- AnnotationHub()
# query(ah, c("Gencode", "gff", "human","GRCh38","basic"))
# gc <- ah[["AH75120"]]
# gc <- ah[["AH49556"]]
gc_db <<- ah[["AH75120"]]
}
reg <- GRanges(df$chr,
IRanges(as.numeric(df$pos1),
as.numeric(df$pos2)))
overlaps <- findOverlaps(reg, gc_db)
genes <- extractList(gc_db$gene_name, as(overlaps, "List"))
genes <- unstrsplit(unique(genes), ";") # Needed in case more than one gene overlaps.
annot_regions <- cbind.data.frame(df, genes) %>%
separate_rows(genes, sep = ";") %>% subset(genes != '')
merged <- merge(annot_regions,gene_exp,by.x = "genes", by.y = "gene",all.x = T)
diffs <- merged %>% select(mean_H1, mean_DEC) %>%
mutate(diff =  mean_H1 - mean_DEC) %>% subset(!is.na(mean_H1)) %>% unique()
diffs
}
x <- unique(H1_present$label)
datalist = list()
for (i in x) {
genes <- get_overlaps(H1_present[grepl(i,H1_present$label),],normalized_counts)
z = data.frame(cell=c(rep(i,nrow(genes))),diffs=genes$mean_H1)
datalist[[i]] <- z
}
no_label <- get_overlaps(endo_only[grepl("[123456]",endo_only$label),],normalized_counts)
z = data.frame(cell=c(rep('no_label',nrow(no_label))),diffs=no_label$mean_H1)
datalist[["no_label"]] <- z
all <- bind_rows(datalist)
head(all)
comparisons = list(c("nmf1","no_label"),
c("nmf2","no_label"),
c("nmf3","no_label"),
c("nmf4","no_label"),
c("nmf5","no_label"),
c("nmf6","no_label")),
test = 'wilcox.test',
step_increase = c(.1),
map_signif_level = F) +
scale_x_discrete(labels = c("1_EnhWk/Quies","2_Tx","3_Biv","4_TSS","5_Enh","6_Repr")) +
theme_minimal()
# png("gene_exp_counts.png",width = 1300, height = 800, res = 200)
base_plot <- ggplot(all, aes(y = log(diffs+1), x = cell)) +
geom_boxplot() +
labs(x = "Regions", y = "log(normalized counts)",
title = "Gene Expression (at base region) distribution by label") +
geom_signif(
comparisons = list(c("nmf1","no_label"),
c("nmf2","no_label"),
c("nmf3","no_label"),
c("nmf4","no_label"),
c("nmf5","no_label"),
c("nmf6","no_label")),
test = 'wilcox.test',
step_increase = c(.1),
map_signif_level = F) +
scale_x_discrete(labels = c("1_EnhWk/Quies","2_Tx","3_Biv","4_TSS","5_Enh","6_Repr")) +
theme_minimal()
base_plot
comparisons = list(c("nmf1","no_label"),
c("nmf2","no_label"),
c("nmf3","no_label"),
c("nmf4","no_label"),
c("nmf5","no_label"),
c("nmf6","no_label")),
test = 'wilcox.test',
step_increase = c(.1),
map_signif_level = F) +
scale_x_discrete(labels = c("nmf1_EnhWk/Quies","nmf2_Tx","nmf3_Biv","nmf4_TSS","nmf5_Enh","nmf6_Repr", "No Label")) +
theme_minimal()
# png("gene_exp_counts.png",width = 1300, height = 800, res = 200)
base_plot <- ggplot(all, aes(y = log(diffs+1), x = cell)) +
geom_boxplot() +
labs(x = "Regions", y = "log(normalized counts)",
title = "Gene Expression (at base region) distribution by label") +
geom_signif(
comparisons = list(c("nmf1","no_label"),
c("nmf2","no_label"),
c("nmf3","no_label"),
c("nmf4","no_label"),
c("nmf5","no_label"),
c("nmf6","no_label")),
test = 'wilcox.test',
step_increase = c(.1),
map_signif_level = F) +
scale_x_discrete(labels = c("nmf1_EnhWk/Quies","nmf2_Tx","nmf3_Biv","nmf4_TSS","nmf5_Enh","nmf6_Repr", "No Label")) +
theme_minimal()
contact_bed <- read_tsv("../get_contact_labels/connections.tsv",col_names = c("chr","pos1","pos2","chr_merged","pos1_merged","pos2_merged","lab_merged"),
col_types = "cddcccc")
sep_contact_bed <- contact_bed %>% separate_rows(chr_merged,pos1_merged,pos2_merged,sep = ',') %>% distinct()
colnames(sep_contact_bed) <- c("chr","pos1","pos2","contact_chr", "contact_pos1","contact_pos2",'labels')
endo_contacts <- sep_contact_bed[grep("_endo", sep_contact_bed$chr),]
h1_contacts <- sep_contact_bed[grep("_h1", sep_contact_bed$chr),]
h1_contacts$contact_chr <- gsub("_.*",'',h1_contacts$contact_chr)
endo_contacts$contact_chr <- gsub("_.*",'',endo_contacts$contact_chr)
h1_contacts$chr <- gsub("_.*",'',h1_contacts$chr)
endo_contacts$chr <- gsub("_.*",'',endo_contacts$chr)
H1_nmf3D_regions <- GRanges(H1_present$chr, IRanges(as.numeric(H1_present$pos1),
as.numeric(H1_present$pos2)))
H1_contact_regions <- GRanges(h1_contacts$chr, IRanges(as.numeric(h1_contacts$pos1),
as.numeric(h1_contacts$pos2)))
endo_only_nmf3D_regions <- GRanges(endo_only$chr, IRanges(as.numeric(endo_only$pos1),
as.numeric(endo_only$pos2)))
endo_contact_regions <- GRanges(endo_contacts$chr, IRanges(as.numeric(endo_contacts$pos1),
as.numeric(endo_contacts$pos2)))
x <- findOverlaps(H1_nmf3D_regions,H1_contact_regions)
y <- findOverlaps(endo_only_nmf3D_regions,endo_contact_regions)
h1_matches <- cbind.data.frame(h1_contacts[attr(x,'to'),],H1_present[attr(x,'from'),])
h1_matches <- h1_matches %>% select(contact_chr,contact_pos1,contact_pos2, label)
colnames(h1_matches) <- c("chr", "pos1","pos2","label")
endo_matches <- cbind.data.frame(endo_contacts[attr(y,'to'),],endo_only[attr(y,'from'),])
endo_matches <- endo_matches %>% select(contact_chr,contact_pos1,contact_pos2, label)
colnames(endo_matches) <- c("chr", "pos1","pos2","label")
x <- unique(h1_matches$label)
datalist = list()
for (i in x) {
genes <- get_overlaps(h1_matches[grepl(i,h1_matches$label),],normalized_counts)
z = data.frame(cell=c(rep(i,nrow(genes))),diffs=genes$mean_H1)
datalist[[i]] <- z
}
no_label <- get_overlaps(endo_matches[grepl("[123456]",endo_matches$label),],normalized_counts)
z = data.frame(cell=c(rep("no_label",nrow(no_label))),diffs=no_label$mean_H1)
datalist[["no_label"]] <- z
all <- bind_rows(datalist)
# png("gene_exp_counts_contacts.png",width = 1300, height = 800, res = 200)
contact_plot <- ggplot(all, aes(y = log(diffs+1), x = cell)) +
geom_boxplot() +
labs(x = "Regions", y = "log(normalized counts)",
title = "Gene Expression (at contact region) distribution by label") +
geom_signif(
comparisons = list(c("nmf1","no_label"),
c("nmf2","no_label"),
c("nmf3","no_label"),
c("nmf4","no_label"),
c("nmf5","no_label"),
c("nmf6","no_label")),
test = 'wilcox.test',
step_increase = c(.1),
map_signif_level = F) +
scale_x_discrete(labels = c("nmf1_EnhWk/Quies","nmf2_Tx","nmf3_Biv","nmf4_TSS","nmf5_Enh","nmf6_Repr", "No Label")) +
theme_minimal()
# install.packages("egg")
library(egg)
png("gene_exp_H1.png",width = 1300, height = 1800, res = 200)
grid.arrange(base_plot,contact_plot,nrow = 2,
top = "H1 gene expression by label and region")
dev.off()
setwd("~/Documents/UNLV/Year4/nmf3D/choose_top_results/")
library(tidyverse)
library(ggsignif)
total_int <- read_tsv("nmf3D_network_all.bed", col_names = F, col_types = 'ccccccccc')
H1_present <- total_int[total_int$X4 != '.',1:4]
H1_only <- total_int[total_int$X8 == '.',1:4]
endo_only <- total_int[total_int$X4 == '.',5:8]
endo_present <- total_int[total_int$X8 != '.',5:8]
colnames(H1_present) <- c("chr", "pos1", "pos2", "label")
colnames(endo_present) <- c("chr", "pos1", "pos2", "label")
colnames(H1_only) <- c("chr", "pos1", "pos2", "label")
colnames(endo_only) <- c("chr", "pos1", "pos2", "label")
# RAW COUNT NORMALIZATION
exp_data_raw <- read_csv("../expression/GSE75748_bulk_cell_type_ec.csv")
exp_data <- round(exp_data_raw[,c(2,3,4,5,9,10)])
meta <- cbind.data.frame(cell_type = c(rep("H1",4),"DEC","DEC"))
rownames(meta) <- colnames(exp_data)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = exp_data, colData = meta, design = ~ cell_type)
dds <- estimateSizeFactors(dds)
normalized_counts <- data.frame(counts(dds, normalized=TRUE))
normalized_counts$gene <- exp_data_raw$gene
normalized_counts <- normalized_counts %>% rowwise() %>%
mutate(mean_H1 = mean(c(H1_rep1,H1_rep2,H1_rep3,H1_rep4)),
mean_DEC =mean(c(DEC_rep1,DEC_rep2)))
## INCLUDE GENE OVERLAPS
library(GenomicRanges)
library(AnnotationHub)
# ah <- AnnotationHub()
# gc_db <- ah[["AH75120"]]
get_overlaps <- function(df, gene_exp) {
if (!exists("gc_db")) {
ah <- AnnotationHub()
# query(ah, c("Gencode", "gff", "human","GRCh38","basic"))
# gc <- ah[["AH75120"]]
# gc <- ah[["AH49556"]]
gc_db <<- ah[["AH75120"]]
}
reg <- GRanges(df$chr,
IRanges(as.numeric(df$pos1),
as.numeric(df$pos2)))
overlaps <- findOverlaps(reg, gc_db)
genes <- extractList(gc_db$gene_name, as(overlaps, "List"))
genes <- unstrsplit(unique(genes), ";") # Needed in case more than one gene overlaps.
annot_regions <- cbind.data.frame(df, genes) %>%
separate_rows(genes, sep = ";") %>% subset(genes != '')
merged <- merge(annot_regions,gene_exp,by.x = "genes", by.y = "gene",all.x = T)
diffs <- merged %>% select(mean_H1, mean_DEC) %>%
mutate(diff =  mean_H1 - mean_DEC) %>% subset(!is.na(mean_H1)) %>% unique()
diffs
}
x <- unique(endo_present$label)
datalist = list()
for (i in x) {
genes <- get_overlaps(endo_present[grepl(i,endo_present$label),],normalized_counts)
z = data.frame(cell=c(rep(i,nrow(genes))),diffs=genes$mean_DEC)
datalist[[i]] <- z
}
no_label <- get_overlaps(H1_only[grepl("[123456]",H1_only$label),],normalized_counts)
z = data.frame(cell=c(rep('no_label',nrow(no_label))),diffs=no_label$mean_DEC)
datalist[["no_label"]] <- z
all <- bind_rows(datalist)
# png("gene_exp_counts.png",width = 1300, height = 800, res = 200)
base_plot <- ggplot(all, aes(y = log(diffs+1), x = cell)) +
geom_boxplot() +
labs(x = "Regions", y = "log(normalized counts)",
title = "Gene Expression (at base region) distribution by label") +
geom_signif(
comparisons = list(c("nmf1","no_label"),
c("nmf2","no_label"),
c("nmf3","no_label"),
c("nmf4","no_label"),
c("nmf5","no_label"),
c("nmf6","no_label")),
test = 'wilcox.test',
step_increase = c(.1),
map_signif_level = F) +
scale_x_discrete(labels = c("nmf1_EnhWk/Quies","nmf2_Tx","nmf3_Biv","nmf4_TSS","nmf5_Enh","nmf6_Repr", "No Label")) +
theme_minimal()
# dev.off()
##### GET CONTACT BOXPLOTS
contact_bed <- read_tsv("../get_contact_labels/connections.tsv",col_names = c("chr","pos1","pos2","chr_merged","pos1_merged","pos2_merged","lab_merged"),
col_types = "cddcccc")
sep_contact_bed <- contact_bed %>% separate_rows(chr_merged,pos1_merged,pos2_merged,sep = ',') %>% distinct()
colnames(sep_contact_bed) <- c("chr","pos1","pos2","contact_chr", "contact_pos1","contact_pos2",'labels')
endo_contacts <- sep_contact_bed[grep("_endo", sep_contact_bed$chr),]
h1_contacts <- sep_contact_bed[grep("_h1", sep_contact_bed$chr),]
h1_contacts$contact_chr <- gsub("_.*",'',h1_contacts$contact_chr)
endo_contacts$contact_chr <- gsub("_.*",'',endo_contacts$contact_chr)
h1_contacts$chr <- gsub("_.*",'',h1_contacts$chr)
endo_contacts$chr <- gsub("_.*",'',endo_contacts$chr)
#### INTERSECT nmf3D labels
endo_nmf3D_regions <- GRanges(endo_present$chr, IRanges(as.numeric(endo_present$pos1),
as.numeric(endo_present$pos2)))
endo_contact_regions <- GRanges(endo_contacts$chr, IRanges(as.numeric(endo_contacts$pos1),
as.numeric(endo_contacts$pos2)))
H1_only_nmf3D_regions <- GRanges(H1_only$chr, IRanges(as.numeric(H1_only$pos1),
as.numeric(H1_only$pos2)))
H1_contact_regions <- GRanges(h1_contacts$chr, IRanges(as.numeric(h1_contacts$pos1),
as.numeric(h1_contacts$pos2)))
x <- findOverlaps(endo_nmf3D_regions,endo_contact_regions)
y <- findOverlaps(H1_only_nmf3D_regions,H1_contact_regions)
endo_matches <- cbind.data.frame(endo_contacts[attr(x,'to'),],endo_present[attr(x,'from'),])
endo_matches <- endo_matches %>% select(contact_chr,contact_pos1,contact_pos2, label)
colnames(endo_matches) <- c("chr_orig", "pos1_orig","pos2_orig","label_orig")
h1_matches <- cbind.data.frame(h1_contacts[attr(y,'to'),],H1_only[attr(y,'from'),])
h1_matches <- h1_matches %>% select(contact_chr,contact_pos1,contact_pos2, label)
colnames(h1_matches) <- c("chr_orig", "pos1_orig","pos2_orig","label_orig")
x <- unique(endo_matches$label)
datalist = list()
for (i in x) {
genes <- get_overlaps(endo_matches[grepl(i,endo_matches$label),],normalized_counts)
z = data.frame(cell=c(rep(i,nrow(genes))),diffs=genes$mean_DEC)
datalist[[i]] <- z
}
no_label <- get_overlaps(h1_matches[grepl("[123456]",h1_matches$label),],normalized_counts)
z = data.frame(cell=c(rep("no_label",nrow(no_label))),diffs=no_label$mean_DEC)
datalist[["no_label"]] <- z
all <- bind_rows(datalist)
# png("gene_exp_counts_contacts.png",width = 1300, height = 800, res = 200)
contact_plot <- ggplot(all, aes(y = log(diffs+1), x = cell)) +
geom_boxplot() +
labs(x = "Regions", y = "log(normalized counts)",
title = "Gene Expression (at contact region) distribution by label") +
geom_signif(
comparisons = list(c("nmf1","no_label"),
c("nmf2","no_label"),
c("nmf3","no_label"),
c("nmf4","no_label"),
c("nmf5","no_label"),
c("nmf6","no_label")),
test = 'wilcox.test',
step_increase = c(.1),
map_signif_level = F) +
scale_x_discrete(labels = c("nmf1_EnhWk/Quies","nmf2_Tx","nmf3_Biv","nmf4_TSS","nmf5_Enh","nmf6_Repr", "No Label")) +
theme_minimal()
# dev.off()
# install.packages("egg")
library(egg)
png("gene_exp_endo.png",width = 1300, height = 1800, res = 200)
grid.arrange(base_plot,contact_plot,nrow = 2,
top = "Endo gene expression by label and region")
dev.off()
setwd("~/Documents/UNLV/Year4/nmf3D/choose_top_results/chromhmm_added/")
library(tidyverse)
total_int <- read_tsv("total_network.bed")
table(total_int$nmf3D_H1,total_int$nmf3D_endo)
table(total_int$chromHMM_H1,total_int$chromHMM_endo)
z <- table(total_int$nmf3D_H1,total_int$nmf3D_endo,total_int$chromHMM_H1,total_int$chromHMM_endo)
total_int <- total_int %>% mutate(nmf3D_change = paste0(nmf3D_H1,'_',nmf3D_endo)) %>% mutate(chromHMM_change = paste0(chromHMM_H1,'_',chromHMM_endo))
interesting_cells <- (total_int$nmf3D_H1 == 1 | total_int$nmf3D_endo == 1) &
!(total_int$nmf3D_endo == 1 & total_int$nmf3D_H1 == 1)
interesting_cells <- (grepl("Tss",total_int$chromHMM_H1,"Tss") | grepl("Tss",total_int$chromHMM_endo)) &
!(grepl("Tss",total_int$chromHMM_H1) & grepl("Tss",total_int$chromHMM_endo))
interesting_cells <- (total_int$nmf3D_H1 == 5 | total_int$nmf3D_endo == 5)
ss <- total_int[interesting_cells,]
z <- table(ss$nmf3D_change, ss$chromHMM_change)
zz <- data.frame(z)
nonzero <- subset(zz, Freq != 0)
setwd("~/Documents/UNLV/Year4/nmf3D/choose_top_results/chromhmm_added/")
library(tidyverse)
total_int <- read_tsv("total_network.bed")
table(total_int$nmf3D_H1,total_int$nmf3D_endo)
table(total_int$chromHMM_H1,total_int$chromHMM_endo)
total_int <- read_tsv("nmf3D_network_all.bed")
total_int <- read_tsv("nmf3D_network_all.bed",col_names = F)
View(total_int)
total_int
colnames(total_int) <- c("chr_h1","pos1_h1","pos2_h1","nmf3D_h1","chr_endo", "pos1_endo", "pos2_endo","nmf3D_endo")
table(total_int$nmf3D_h1,total_int$nmf3D_endo)
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf")
# devtools::install_github("zdebruine/RcppSparse") # compile dev version
# devtools::install_github("zdebruine/RcppML") # compile dev version
# install.packages("RcppML")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
library(cowplot)
con_mat <- read_tsv("../add_chromhmm_labs_postnmf/matrix_connections_add_chromhmm.tsv")
x <- as.matrix(con_mat[,-1])
rownames(x) <- con_mat$region
matCSC <- as(t(x), "dgCMatrix")
# # Selecting Rank
#
# cv_predict <- crossValidate(matCSC, k = 1:20, method = "predict", reps = 3, seed = 123)
# cv_robust <- crossValidate(matCSC, k = 1:20, method = "robust", reps = 3, seed = 123)
# cv_impute <- crossValidate(matCSC, k = 1:20, method = "impute", reps = 3, seed = 123)
#
# png("rank_selection.png", width = 1500, height = 500, res = 200)
# plot_grid(
#   plot(cv_predict) + ggtitle("method = 'predict'") + theme(legend.position = "none"),
#   plot(cv_robust) + ggtitle("method = 'robust'") + theme(legend.position = "none"),
#   plot(cv_impute) + ggtitle("method = 'impute'") + scale_y_continuous(trans = "log10") + theme(legend.position = "none"),
#   get_legend(plot(cv_predict)), rel_widths = c(1, 1, 1, 0.4), nrow = 1, labels = "auto")
# dev.off()
num_labels = 6
num_runs = 1000
model <- nmf(matCSC, k = num_labels, maxit = num_runs, tol = 1e-20)
# saveRDS(model,paste0("model_",num_labels,".rds"))
# small <- model$h[,c(1:3,10:30)]
z <- as.data.frame(ifelse(grepl("endo",colnames(model$h)),"endo","h1"))
rownames(z) <- colnames(model$h)
colnames(z) <- "cell_type"
# png(paste0("h_",num_labels,".png"),width = 1300, height = 1000, res = 200)
h <- pheatmap(model$h, scale = "column", border_color = NA, cluster_rows = F,
cluster_cols = T, fontsize = 14, show_colnames = F,
main = "H matrix", treeheight_col = 0,
annotation_col = z,
breaks = seq(-1, 1, length.out = 100))
# main = "Segmentation of H1 and naive hESCs",
# breaks = seq(-1, 1, length.out = 100)
# dev.off()
zz <- model$w
rownames(zz) <- c("EnhA1","EnhA2","EnhBiv","EnhG1","EnhG2","EnhWk","Het","Quies","ReprPC","ReprPCWk",
"TssA","TssBiv","TssFlnk","TssFlnkD","TssFlnkU","Tx","TxWk","ZNF-Rpts",
"1_EnhWk/Quies","2_Tx","3_Biv","4_TSS","5_Enh","6_Repr")
order_rows <- c("EnhA1","EnhA2","EnhG1","EnhG2","EnhWk","TssA","TssFlnk","TssFlnkD","TssFlnkU",
"Tx","TxWk","EnhBiv","TssBiv","ReprPC","ReprPCWk","Het","Quies", "ZNF-Rpts",
"1_EnhWk/Quies","2_Tx","3_Biv","4_TSS","5_Enh","6_Repr")
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
scaled_h <- apply(model$h, 2, function(x) x/sum(x))
all_labelled <- data.frame(type = con_mat$type,
chr = con_mat$chr,
pos1 = con_mat$pos1,
pos2 = con_mat$pos2,
top_region = apply(scaled_h,2, max),
label = rownames(model$h)[apply(scaled_h,2, function(x) which.max(x))])
View(all_labelled)
View(scaled_h)
apply(scaled_h,2, function(x) x[["nmf4"]] > 0.3 & x[["nmf5"]] > 0.3)
colnames(scaled_h)[apply(scaled_h,2, function(x) x[["nmf4"]] > 0.3 & x[["nmf5"]] > 0.3)]
nmf4_5_regions <- colnames(scaled_h)[apply(scaled_h,2, function(x) x[["nmf4"]] > 0.3 & x[["nmf5"]] > 0.3)]
nmf4_5_regions <- all_labelled[apply(scaled_h,2, function(x) x[["nmf4"]] > 0.3 & x[["nmf5"]] > 0.3)]
nmf4_5_regions <- all_labelled[apply(scaled_h,2, function(x) x[["nmf4"]] > 0.3 & x[["nmf5"]] > 0.3),]
View(nmf4_5_regions)
table(nmf4_5_regions$label)
table(nmf4_5_regions$type)
write_tsv("nmf4_nmf5_regions.tsv")
write_tsv(nmf4_5_regions,"nmf4_nmf5_regions.tsv")
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf/nmf4_5_chromhmmadded/")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
library(cowplot)
num_labels = 6
num_runs = 1000
model <- nmf(matCSC, k = num_labels, maxit = num_runs, tol = 1e-20)
saveRDS(model,paste0("../with_chromhmm_model_",num_labels,".rds"))
model <- readRDS("../with_chromhmm_model_6.rds")
scaled_h <- apply(model$h, 2, function(x) x/sum(x))
all_labelled <- data.frame(type = con_mat$type,
chr = con_mat$chr,
pos1 = con_mat$pos1,
pos2 = con_mat$pos2,
top_region = apply(scaled_h,2, max),
label = rownames(model$h)[apply(scaled_h,2, function(x) which.max(x))])
nmf4_5_regions <- all_labelled[apply(scaled_h,2, function(x) x[["nmf4"]] > 0.7),]
nmf4 <- all_labelled[apply(scaled_h,2, function(x) x[["nmf4"]] > 0.7),]
View(nmf4)
write_tsv(nmf4,"nmf4_regions.tsv")
