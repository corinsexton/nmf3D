`Repeats Prop of Assembly`, `Gene Number`)
colnames(z) <- c("log_genome_size", "perc_gc_content", "prop_repeat_content", "gene_num")
# z <- z[complete.cases(z),]
reg <- glm(gene_num ~ log_genome_size + perc_gc_content + rep, data = z)
# z <- z[complete.cases(z),]
reg <- glm(gene_num ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
write_tsv(z, "~/Documents/UNLV/Year3/cs689_machinelearning/assignment2/c_value.tsv")
View(z)
z <- x %>% select(`Log Estimated Genome Size`,`Genomic GC content (%)`,
`Repeats Prop of Assembly`, `Gene Number`,`Log Gene Number`)
colnames(z) <- c("log_genome_size", "perc_gc_content", "prop_repeat_content", "gene_num", 'lg')
# z <- z[complete.cases(z),]
reg <- glm(lg ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
write_tsv(z, "~/Documents/UNLV/Year3/cs689_machinelearning/assignment2/c_value.tsv")
z <- x %>% select(`Log Estimated Genome Size`,`Genomic GC content (%)`,
`Repeats Prop of Assembly`, `Log Gene Number`)
colnames(z) <- c("log_genome_size", "perc_gc_content", "prop_repeat_content", "log_gene_num")
# z <- z[complete.cases(z),]
reg <- glm(lg ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
# z <- z[complete.cases(z),]
reg <- glm(log_gene_num ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
write_tsv(z, "~/Documents/UNLV/Year3/cs689_machinelearning/assignment2/c_value.tsv")
View(z)
View(z)
View(x)
z <- x %>% select(`Log Estimated Genome Size`,`Genomic GC content (%)`,
`Repeats Prop of Assembly`, `Coding Proportion of Estimated Genome Size`)
colnames(z) <- c("log_genome_size", "perc_gc_content", "prop_repeat_content", "log_gene_num")
# z <- z[complete.cases(z),]
reg <- glm(log_gene_num ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
write_tsv(z, "~/Documents/UNLV/Year3/cs689_machinelearning/assignment2/c_value.tsv")
z <- x %>% select(`Log Estimated Genome Size`,`Genomic GC content (%)`,
`Repeats Prop of Assembly`, `Gene Num`)
z <- x %>% select(`Log Estimated Genome Size`,`Genomic GC content (%)`,
`Repeats Prop of Assembly`, `Gene Number`)
colnames(z) <- c("log_genome_size", "perc_gc_content", "prop_repeat_content", "gene_num")
# z <- z[complete.cases(z),]
reg <- glm(log_gene_num ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
# z <- z[complete.cases(z),]
reg <- glm(gene_num ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
write_tsv(z, "~/Documents/UNLV/Year3/cs689_machinelearning/assignment2/c_value.tsv")
z <- x %>% select(`Log Estimated Genome Size`,`Genomic GC content (%)`,
`Repeats Prop of Assembly`, `Gene Number`)
z <- z[complete.cases(z),]
x <- read_tsv("~/Downloads/genomes/Genomic parameters data set-Table 1.tsv")
z <- x %>% select(`Log Estimated Genome Size`,`Genomic GC content (%)`,
`Repeats Prop of Assembly`, `Gene Number`)
colnames(z) <- c("log_genome_size", "perc_gc_content", "prop_repeat_content", "gene_num")
z <- z[complete.cases(z),]
reg <- glm(gene_num ~ log_genome_size + perc_gc_content + prop_repeat_content, data = z)
summary(reg)
nrow(z)
write_tsv(z, "~/Documents/UNLV/Year3/cs689_machinelearning/assignment2/c_value.tsv")
dds <- read_rds("/Users/coripenrod/Documents/UNLV/Year 1/salmon/subset_dds.rds")
dds <- readRDS("/Users/coripenrod/Documents/UNLV/Year 1/salmon/subset_dds.rds")
dds2 <- dds[1:100,]
results(dds2)
library(DESeq2)
library(readr)
library(pheatmap)
library(ggplot2)
results(dds2)
saveRDS(dds2, "~/Desktop/deseq_app/dds.rds")
shiny::runApp('Downloads/mwshiny-examples-master/pop')
dds2 <- dds[,sample(1:500,30)]
saveRDS(dds2, "~/Desktop/deseq_app/dds.rds")
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
names(dds2)
runApp('Downloads/mwshiny-examples-master/pop')
# ggplot(pcaData, aes(PC1, PC2, color=color_lab, shape=shape_lab)) +
#   geom_point(size=3) +
#   xlab(paste0("PC1: ",percentVar[1],"% variance")) +
#   ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#   coord_fixed()
}
shiny::runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
?plotPCA
runApp('Downloads/mwshiny-examples-master/pop')
coldata(dds2)
colData(dds2)
runApp('Downloads/mwshiny-examples-master/pop')
vsd <- varianceStabilizingTransformation(dds2)
pcaData <- plotPCA(vsd, intgroup=labels, returnData=TRUE)
pcaData <- plotPCA(vsd, intgroup=labels, returnData=TRUE)
vsd <- varianceStabilizingTransformation(dds2)
pcaData <- plotPCA(vsd, intgroup=labels, returnData=TRUE)
labels <- c("condition")
pcaData <- plotPCA(vsd, intgroup=labels, returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
color_lab <- "condition"
dds[[color_lab]]
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds[[color_lab]],
text = names(dds))
fig %>% layout(xaxis = list(paste0("PC1: ",percentVar[1],"% variance")),
yaxis = paste0("PC2: ",percentVar[2],"% variance"))
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds[[color_lab]],
text = names(dds))
fig
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds2[[color_lab]],
text = names(dds2))
fig
colnames(dds2)
dds2[[color_lab]]
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds2[[color_lab]],
text = colnames(dds2))
fig
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds2[[color_lab]],
text = colnames(dds2),
trace = "scatter")
fig
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds2[[color_lab]],
text = colnames(dds2),
type = "scatter")
fig
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds2[[color_lab]],
text = colnames(dds2),
type = "scatter",
mode = "markers")
fig
fig %>% layout(xaxis = list(paste0("PC1: ",percentVar[1],"% variance")),
yaxis = paste0("PC2: ",percentVar[2],"% variance"))
list(paste0("PC1: ",percentVar[1],"% variance"))
fig %>% layout(xaxis = list(paste0("PC1: ",percentVar[1],"% variance")),
yaxis = list(paste0("PC2: ",percentVar[2],"% variance")))
fig
fig %>% layout(xaxis = list(paste0("PC1: ",percentVar[1],"% variance")),
yaxis = list(paste0("PC2: ",percentVar[2],"% variance")))
fig <- plot_ly(data = pcaData, x = ~PC1, y = ~PC2,
color = dds2[[color_lab]],
text = colnames(dds2),
type = "scatter",
mode = "markers")
fig <- fig %>% layout(xaxis = list(paste0("PC1: ",percentVar[1],"% variance")),
yaxis = list(paste0("PC2: ",percentVar[2],"% variance")))
fig
fig <- fig %>% layout(xaxis = list(title = paste0("PC1: ",percentVar[1],"% variance")),
yaxis = list(title = paste0("PC2: ",percentVar[2],"% variance")))
fig
runApp('Downloads/mwshiny-examples-master/pop')
att_ss <- attrib[attrib$run %in% colnames(hervh_mat),]
runApp('Downloads/mwshiny-examples-master/pop')
results(dds2)
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
res <- results(dds2,name = lab)
res <- results(dds2)
# add a grouping column; default value is "not significant"
res["group"] <- "NotSignificant"
# change the grouping for the entries with significance but not a large enough Fold change
res[which(res['padj'] < 0.05 & abs(res['log2FoldChange']) < 1.5 ),
"group"] <- "Significant"
which(res['padj'] < 0.05 & abs(res['log2FoldChange'])
)
which(res['padj'] < 0.05 & abs(res['log2FoldChange']) < 1.5 )
res['padj']
res['padj'] < 0.05 & abs(res['log2FoldChange']) < 1.5
res['log2FoldChange']
abs(res['log2FoldChange']) < 1.5
abs(res['log2FoldChange'])
res['padj'] < 0.05
res['padj']
res['padj']
res['padj'] < 0.05
res <- data.frame(results(dds2))
# add a grouping column; default value is "not significant"
res["group"] <- "NotSignificant"
# change the grouping for the entries with significance but not a large enough Fold change
res[which(res['padj'] < 0.05 & abs(res['log2FoldChange']) < 1.5 ),
"group"] <- "Significant"
# change the grouping for the entries a large enough Fold change but not a low enough p value
res[which(res['padj'] > 0.05 & abs(res['log2FoldChange']) > 1.5 ),
"group"] <- "FoldChange"
# change the grouping for the entries with both significance and large enough fold change
res[which(res['padj'] < 0.05 & abs(res['log2FoldChange']) > 1.5 ),
"group"] <- "Significant&FoldChange"
p <- plot_ly(data = res,
x = ~log2FoldChange,
y = -log10(padj),
mode = "markers",
color = group) %>%
layout(title ="Volcano Plot") %>%
p
p <- plot_ly(data = res,
x = ~log2FoldChange,
y = ~-log10(padj),
mode = "markers",
color = group) %>%
layout(title ="Volcano Plot") %>%
p
p <- plot_ly(data = res,
x = ~log2FoldChange,
y = ~-log10(padj),
mode = "markers",
color = ~group) %>%
layout(title ="Volcano Plot") %>%
p
p <- plot_ly(data = res,
x = ~log2FoldChange,
y = ~-log10(padj),
mode = "markers",
color = ~group) %>%
layout(title ="Volcano Plot")
p
p <- plot_ly(data = res,
x = ~log2FoldChange,
y = ~-log10(padj),
mode = "markers",
color = ~group,
type = 'scatter') %>%
layout(title ="Volcano Plot")
p
View(results)
View(res)
p <- plot_ly(data = res,
x = ~log2FoldChange,
y = ~-log10(padj),
mode = "markers",
color = ~group,
text = rownames(res),
type = 'scatter') %>%
layout(title ="Volcano Plot")
p
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
runApp('Downloads/mwshiny-examples-master/pop')
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))
library(ggplot2)
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ylim(20,30)
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ylim(20,30)
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
)
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))
ggplot(data = subset(mpg, class != '2seater'), aes(x = class, y = hwy))+
geom_boxplot() +
labs(title = "Car Data",
x = "Car Class",
y = "Highway Fuel Economy")
ggplot(data = subset(mpg, class != '2seater'), aes(x = class, y = hwy, fill = drv))+
geom_boxplot() +
labs(title = "Car Data",
x = "Car Class",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))+
geom_smooth()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))+
geom_smooth(method = 'lm')
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))+
geom_smooth(aes(colour=NA)method = 'lm')
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))+
geom_smooth(aes(colour=NA), method = 'lm')
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))+
geom_smooth(aes(colour=NA, shape = NA), method = 'lm')
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ylim(20,30) +
geom_smooth(hwy~displ+class+drv, aes(colour=NA, shape = NA), method = 'lm')
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ylim(20,30) +
geom_smooth(hwy~displ+class+drv, method = 'lm')
?geom_smooth
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel")) +
ylim(20,30) +
geom_smooth(aes(colour=NA, shape = NA), method = 'lm')
ggplot(data = mpg, aes(x = <PICK COL>, y = <PICK COL>)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
scale_shape_discrete(labels = c("four wheel drive", "front wheel", "rear wheel"))
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point(color = "blue") +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = subset(mpg, class != "2seater"), aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy")
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth()
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth(aes(colour=NA, shape = NA), method = 'lm')
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
con_mat <- read_tsv("matrix_connections.tsv")
x <- as.matrix(con_mat[,-1])
rownames(x) <- con_mat$region
matCSC <- as(x, "dgCMatrix")
num_labels = 6
num_runs = 100
model <- nmf(matCSC, k = num_labels, maxit = num_runs, tol = 1e-100)
# ONLY LOCALLY, NON DEV VERSION OF RcppML
colnames(model$h) <- colnames(matCSC)
rownames(model$h) <- 1:num_labels
# # ONLY LOCALLY, NON DEV VERSION OF RcppML
colnames(model$w) <- 1:num_labels
rownames(model$w) <- rownames(matCSC)
z <- as.data.frame(ifelse(grepl("endo",rownames(matCSC)),"endo","h1"))
rownames(z) <- rownames(matCSC)
colnames(z) <- "cell_type"
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
all_labelled <- data.frame(type = con_mat$type, chr = con_mat$chr, pos1 = con_mat$pos1, pos2 = con_mat$pos2,
label = colnames(model$w)[apply(model$w,1,which.max)])
h1_labelled <- subset(all_labelled, type == 'h1')[,2:5]
endo_labelled <- subset(all_labelled, type == 'endo')[,2:5]
setwd("~/Documents/UNLV/Year4/nmf3D/visualizations/sankey")
library(tidyverse)
library(UpSetR)
library(networkD3)
net <- read_tsv("network.tsv")
network <- as_tibble(table(net))
colnames(network) <- c("source", "target", "value")
network$source <- as.numeric(network$source)
network$target <- as.numeric(network$target)
network$value <- as.numeric(network$value)
# MUST BE ZERO-INDEXED
network$source <- network$source - 1
network$target <- network$target - 1 + 6
nodes = data.frame("name" =
c(paste0(1:6,""),
paste0(1:6,"")),
"node" = 0:2,stringsAsFactors = F
)
names(network) = c("source", "target", "value")
# Plot
sn <- sankeyNetwork(Links = data.frame(network), Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",fontSize= 14, nodeWidth = 5)
# sn <- htmlwidgets::prependContent(sn, htmltools::tags$h1("HERVH Candidate Loci"))
sn <- htmlwidgets::prependContent(sn, htmltools::HTML('<h1 style="font-family:Arial, sans-serif;font-weight:bold;margin-bottom:0;text-align:center">Label Movement</h1><div style="position:relative;padding: 10px 20px 0px 20px;margin-bottom:50px;">
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;left:0;">H1</p>
<p style="font-family:Arial, sans-serif;font-weight:bold;position:absolute;right:0;">Endoderm</p>
</div>'))
# htmlwidgets::sizingPolicy(padding = 10, browser.fill = TRUE)
# sn$sizingPolicy$viewer$fill <- FALSE
sn$sizingPolicy$browser$fill <- F
sn$sizingPolicy$browser$defaultWidth <- 400
# you save it as an html
saveNetwork(sn, "6lab_nmf.html")
library(webshot)
# you convert it as png
webshot("6lab_nmf.html","6lab_nmf.png", vwidth =400, vheight = 600)
