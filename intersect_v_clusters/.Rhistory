x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth()
ggplot(data = subset(mpg, class != '2seater'), aes(x = displ, y = hwy, color = class, shape = drv))+
geom_point() +
labs(title = "Car Data",
x = "Engine Size",
y = "Highway Fuel Economy",
color = "Class",
shape = "Drive type") +
geom_smooth(aes(colour=NA, shape = NA), method = 'lm')
setwd("~/Documents/UNLV/Year4/nmf3D/choose_top_results/")
library(tidyverse)
total_int <- read_tsv("total_network.bed")
table(total_int$nmf3D_H1,total_int$nmf3D_endo)
table(total_int$chromHMM_H1,total_int$chromHMM_endo)
z <- table(total_int$nmf3D_H1,total_int$nmf3D_endo,total_int$chromHMM_H1,total_int$chromHMM_endo)
total_int <- total_int %>% mutate(nmf3D_change = paste0(nmf3D_H1,'_',nmf3D_endo)) %>% mutate(chromHMM_change = paste0(chromHMM_H1,'_',chromHMM_endo))
interesting_cells <- (total_int$nmf3D_H1 == 1 | total_int$nmf3D_endo == 1) &
!(total_int$nmf3D_endo == 1 & total_int$nmf3D_H1 == 1)
interesting_cells <- (grepl("Tss",total_int$chromHMM_H1,"Tss") | grepl("Tss",total_int$chromHMM_endo)) &
!(grepl("Tss",total_int$chromHMM_H1) & grepl("Tss",total_int$chromHMM_endo))
interesting_cells <- (total_int$nmf3D_H1 == 5 | total_int$nmf3D_endo == 5)
ss <- total_int[interesting_cells,]
z <- table(ss$nmf3D_change, ss$chromHMM_change)
zz <- data.frame(z)
nonzero <- subset(zz, Freq != 0)
contact_bed <- read_tsv("../get_contact_labels/connections.tsv",col_names = c("chr","pos1","pos2","chr_merged","pos1_merged","pos2_merged","lab_merged"),
col_types = "cddcccc")
sep_contact_bed <- contact_bed %>% separate_rows(chr_merged,pos1_merged,pos2_merged,sep = ',') %>% distinct()
colnames(sep_contact_bed) <- c("chr","pos1","pos2","contact_chr", "contact_pos1","contact_pos2",'labels')
endo_contacts <- sep_contact_bed[grep("_endo", sep_contact_bed$chr),]
h1_contacts <- sep_contact_bed[grep("_h1", sep_contact_bed$chr),]
h1_contacts$contact_chr <- gsub("_.*",'',h1_contacts$contact_chr)
endo_contacts$contact_chr <- gsub("_.*",'',endo_contacts$contact_chr)
h1_contacts$chr <- gsub("_.*",'',h1_contacts$chr)
endo_contacts$chr <- gsub("_.*",'',endo_contacts$chr)
# FIND OVERLAPS IN SIGNIFICANT nmf3D LABELLED REGIONS
library(GenomicRanges)
nmf3D_regions <- GRanges(ss$chr, IRanges(ss$pos1,ss$pos2))
endo_regions <- GRanges(endo_contacts$chr, IRanges(as.numeric(endo_contacts$pos1),
as.numeric(endo_contacts$pos2)))
x <- findOverlaps(nmf3D_regions,endo_regions)
endo_matches <- cbind.data.frame(endo_contacts[attr(x,'to'),],ss[attr(x,'from'),])
h1_regions <- GRanges(h1_contacts$chr, IRanges(as.numeric(h1_contacts$pos1),as.numeric(h1_contacts$pos2)))
endo_matched_regions <- GRanges(endo_matches[,1], IRanges(as.numeric(endo_matches[,2]),as.numeric(endo_matches[,3])))
x <- findOverlaps(endo_matched_regions,h1_regions)
total_matches <- cbind.data.frame(h1_contacts[attr(x,'to'),],endo_matches[attr(x,'from'),])
colnames(total_matches) <- c("H1_chr", "H1_pos1","H1_pos2","H1_contact_chr",
"H1_contact_pos1", "H1_contact_pos2","H1_contact_labels",
"endo_chr", "endo_pos1","endo_pos2","endo_contact_chr",
"endo_contact_pos1", "endo_contact_pos2","endo_contact_labels",
"nmf3D_chr", "nmf3D_pos1", "mnf3D_pos2","nmf3D_H1_lab", "nmf3D_endo_lab",
"chromHMM_chr", "chromHMM_pos1", "chromHMM_pos2",
"chromHMM_H1_lab", "chromHMM_endo_lab",
"nmf3D_change", "chromHMM_change")
library(GenomicRanges)
library(AnnotationHub)
# h1_reg <- GRanges(total_matches$H1_contact_chr, IRanges(as.numeric(total_matches$H1_contact_pos1),
#                                                         as.numeric(total_matches$H1_contact_pos2)))
h1_reg <- GRanges(total_matches$H1_chr, IRanges(as.numeric(total_matches$H1_pos1),
as.numeric(total_matches$H1_pos2)))
ah <- AnnotationHub()
# query(ah, c("Gencode", "gff", "human","GRCh38","basic"))
gc <- ah[["AH75120"]]
overlaps <- findOverlaps(h1_reg, gc)
genes <- extractList(gc$gene_name, as(overlaps, "List"))
H1_genes <- unstrsplit(unique(genes), ";") # Needed in case more than one gene overlaps.
annot_regions <- cbind.data.frame(total_matches, H1_genes) %>% separate_rows(H1_genes, sep = ";")
endo_reg <- GRanges(annot_regions$endo_chr, IRanges(as.numeric(annot_regions$endo_pos1),as.numeric(annot_regions$endo_pos2)))
overlaps <- findOverlaps(endo_reg, gc)
genes <- extractList(gc$gene_name, as(overlaps, "List"))
endo_genes <- unstrsplit(unique(genes), ";") # Needed in case more than one gene overlaps.
annot_regions <- cbind.data.frame(annot_regions, endo_genes) %>% separate_rows(endo_genes, sep = ";")
exp_data <- read_csv("../expression/GSE75748_bulk_cell_type_ec.csv")
merged_h1 <- merge(annot_regions,exp_data,by.x = "H1_genes", by.y = "gene",all.x = T)
merged_endo <- merge(annot_regions,exp_data,by.x = "endo_genes", by.y = "gene")
changes <- merged_h1 %>% select(H1_genes, endo_genes, nmf3D_change, chromHMM_change, H1_rep1,H1_rep2,H1_rep3,H1_rep4,DEC_rep1,DEC_rep2)
changes <- changes %>% rowwise() %>% mutate(mean_H1 = mean(c(H1_rep1,H1_rep2,H1_rep3,H1_rep4)),
mean_DEC =mean(c(DEC_rep1,DEC_rep2)))
View(total_matches)
total_int <- read_tsv("total_network.bed")
table(total_int$nmf3D_H1,total_int$nmf3D_endo)
View(total_int)
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf/")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
library(cowplot)
con_mat <- read_tsv("../create_matrix/matrix_connections.tsv")
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
library(cowplot)
con_mat <- read_tsv("../create_matrix/matrix_connections.tsv")
x <- as.matrix(con_mat[,-1])
rownames(x) <- con_mat$region
matCSC <- as(t(x), "dgCMatrix")
num_labels = 6
num_runs = 1000
model <- nmf(matCSC, k = num_labels, maxit = num_runs, tol = 1e-20)
saveRDS(model,paste0("model_",num_labels,".rds"))
model <- readRDS("model_6.rds")
scaled_h <- apply(model$h, 2, function(x) x/sum(x))
all_labelled <- data.frame(type = con_mat$type,
chr = con_mat$chr,
pos1 = con_mat$pos1,
pos2 = con_mat$pos2,
top_region = apply(scaled_h,2, max),
label = rownames(model$h)[apply(scaled_h,2, function(x) which.max(x))])
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
all_labelled <- data.frame(type = con_mat$type,
chr = con_mat$chr,
pos1 = con_mat$pos1,
pos2 = con_mat$pos2,
top_region = apply(scaled_h,2, max),
label = rownames(model$h)[apply(scaled_h,2, function(x) which.max(x))])
all_labelled <- all_labelled[all_labelled$top_region > 0.75,]
h1_labelled <- subset(all_labelled, type == 'h1')[,c(2:4,6)]
endo_labelled <- subset(all_labelled, type == 'endo')[,c(2:4,6)]
write_tsv(h1_labelled, "h1_labelled_chromhmm.bed", col_names = F)
write_tsv(endo_labelled, "endo_labelled_chromhmm.bed", col_names = F)
all_labelled <- data.frame(type = con_mat$type,
chr = con_mat$chr,
pos1 = con_mat$pos1,
pos2 = con_mat$pos2,
top_region = apply(scaled_h,2, max),
label = rownames(model$h)[apply(scaled_h,2, function(x) which.max(x))])
all_labelled <- all_labelled[all_labelled$top_region > 0.60,]
h1_labelled <- subset(all_labelled, type == 'h1')[,c(2:4,6)]
endo_labelled <- subset(all_labelled, type == 'endo')[,c(2:4,6)]
write_tsv(h1_labelled, "h1_labelled_chromhmm.bed", col_names = F)
write_tsv(endo_labelled, "endo_labelled_chromhmm.bed", col_names = F)
all_labelled <- data.frame(type = con_mat$type,
chr = con_mat$chr,
pos1 = con_mat$pos1,
pos2 = con_mat$pos2,
top_region = apply(scaled_h,2, max),
label = rownames(model$h)[apply(scaled_h,2, function(x) which.max(x))])
all_labelled <- all_labelled[all_labelled$top_region > 0.55,]
h1_labelled <- subset(all_labelled, type == 'h1')[,c(2:4,6)]
endo_labelled <- subset(all_labelled, type == 'endo')[,c(2:4,6)]
write_tsv(h1_labelled, "h1_labelled_chromhmm.bed", col_names = F)
write_tsv(endo_labelled, "endo_labelled_chromhmm.bed", col_names = F)
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf/")
write_tsv(h1_labelled, "h1_labelled_chromhmm.bed", col_names = F)
write_tsv(endo_labelled, "endo_labelled_chromhmm.bed", col_names = F)
write_tsv(h1_labelled, "h1_labelled.bed", col_names = F)
write_tsv(endo_labelled, "endo_labelled.bed", col_names = F)
setwd("~/Documents/UNLV/Year4/nmf3D/intersect_v_clusters/")
library(tidyverse)
intersects <- read_tsv("../choose_top_results/total_network_H1.bed")
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed")
View(clusters)
View(intersects)
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed")
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz'))
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz','yy'))
intersects <- read_tsv("../choose_top_results/total_network_H1.bed")
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed")
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed")
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",'chr','pos1','pos2')
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','lab'))
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf/nmf4_5_chromhmmadded/")
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf/nmf4_5_chromhmmadded/")
# setwd("/home/csexton/compute/NMF_differentiation/RcppML_nmf")
setwd("/Users/coripenrod/Documents/UNLV/Year4/nmf3D/RcppML_nmf/add_chromhmm//")
library(Matrix)
library(RcppML)
library(tidyverse)
library(pheatmap)
library(cowplot)
con_mat <- read_tsv("../../add_chromhmm_labs_postnmf/matrix_connections_add_chromhmm.tsv")
con_mat <- con_mat %>% separate(region,c("chr","type","pos1","pos2"),sep = '[:_-]')
model <- readRDS("../with_chromhmm_model_6.rds")
model <- readRDS("with_chromhmm_model_6.rds")
scaled_h <- apply(model$h, 2, function(x) x/sum(x))
all_labelled <- data.frame(type = con_mat$type,
chr = con_mat$chr,
pos1 = con_mat$pos1,
pos2 = con_mat$pos2,
top_region = apply(scaled_h,2, max),
label = rownames(model$h)[apply(scaled_h,2, function(x) which.max(x))])
all_labelled <- all_labelled[all_labelled$top_region > 0.55,]
h1_labelled <- subset(all_labelled, type == 'h1')[,c(2:4,6)]
endo_labelled <- subset(all_labelled, type == 'endo')[,c(2:4,6)]
write_tsv(h1_labelled, "h1_labelled_chromhmm.bed", col_names = F)
write_tsv(endo_labelled, "endo_labelled_chromhmm.bed", col_names = F)
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','lab'))
setwd("~/Documents/UNLV/Year4/nmf3D/intersect_v_clusters/")
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','lab'))
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz','yy'))
intersects <- read_tsv("../choose_top_results/total_network_H1.bed")
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed")
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','lab'))
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
intersects <- read_tsv("intersect_loop_HMM/raw_intersects_H1.bed")
raw_intersects <- read_tsv("intersect_loop_HMM/raw_intersects_H1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
raw_intersects <- read_tsv("intersect_loop_HMM/raw_intersects_H1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score1","score2",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score1","score2",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score1","score2",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz','yy'))
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy'))
nmf_intersects <- read_tsv("../choose_top_results/total_network_H1.bed")
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed")
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','lab'))
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
enh_regions <-
#### FIND PRESENCE OF ENHANCERS IN EACH DATASET
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz','yy')) %>% subset(grep("Enh",label))
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz','yy')) %>% subset(grepl("Enh",label))
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("Enh",label))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("Enh",label))
nmf_intersects <- read_tsv("../choose_top_results/total_network_H1.bed")
nmf_intersects <- read_tsv("../choose_top_results/total_network_H1.bed") %>% subset(grepl("Enh",chromHMM_H1) & grepl("nmf[45]",nmf3D_H1))
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed",col_names = c('chr','pos1','pos2','lab')) %>% subset(grepl("nmf[45]",nmf3D_H1))
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[45]",label))
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','lab')) %>% subset(grepl("nmf[45]",label))
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','labwl')) %>% subset(grepl("nmf[45]",label))
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[45]",label))
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enh_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enh_regions)
}
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
}
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(just_chromhmm,enh_regions)
bed <- just_chromhmm
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
enhancer_regions <- enh_regions
overlaps <- findOverlaps(query_regions, enhancer_regions)
View(overlaps)
View(bed)
View(just_chromhmm)
View(enhancer_regions)
overlaps <- findOverlaps(query_regions, enhancer_regions)
overlaps
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
overlaps
}
find_overlaps_enh(just_chromhmm,enh_regions)
nrow(overlaps)
length(overlaps)
raw_intersect <- rbind.data.frame(raw_intersects_1,raw_intersects_2)
raw_intersects <- rbind.data.frame(raw_intersects_1[,c(1,2,3,7,8,9,10,11,12,13,14,15,16,17)],raw_intersects_2)
raw_intersects <- rbind.data.frame(raw_intersects_1[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)],raw_intersects_2)
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("Enh",label))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("Enh",label))
raw_intersects <- rbind.data.frame(raw_intersects_1[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)],raw_intersects_2)
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("Enh",label))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("Enh",label))
raw_intersects <- rbind.data.frame(raw_intersects_1[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)],raw_intersects_2)
nmf_intersects <- read_tsv("../choose_top_results/total_network_H1.bed") %>% subset(grepl("Enh",chromHMM_H1) & grepl("nmf[45]",nmf3D_H1))
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[45]",label))
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[45]",label))
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
length(overlaps)
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
length(overlaps) / nrow(bed)
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
nmf_intersects <- read_tsv("../choose_top_results/total_network_H1.bed") %>% subset(grepl("Enh",chromHMM_H1) & grepl("nmf[5]",nmf3D_H1))
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[5]",label))
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[5]",label))
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
length(overlaps) / nrow(bed)
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/H1_enhancerAtlas.bed")
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/H1_enhancerAtlas.bed",col_names = c("chr","pos1","pos2",'score'))
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
length(overlaps) / nrow(bed)
}
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/H1_enhancerAtlas.bed",col_names = c("chr","start","end",'score'))
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
length(overlaps) / nrow(bed)
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
View(just_chromhmm)
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz','yy')) %>% subset(grepl("EnhA",label))
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("EnhA",label))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("EnhA",label))
raw_intersects <- rbind.data.frame(raw_intersects_1[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)],raw_intersects_2)
nmf_intersects <- read_tsv("../choose_top_results/total_network_H1.bed") %>% subset(grepl("EnhA",chromHMM_H1) & grepl("nmf[45]",nmf3D_H1))
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[5]",label))
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[45]",label))
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/H1_enhancerAtlas.bed",col_names = c("chr","start","end",'score'))
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
length(overlaps) / nrow(bed)
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",length(overlaps) / nrow(bed)))
}
find_overlaps_enh(just_chromhmm,enh_regions)
cat(paste0("False Positive: ",nrow(bed) -length(overlaps) / nrow(bed)))
cat(paste0("False Positive: ", (nrow(bed) -length(overlaps)) / nrow(bed)))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",length(overlaps) / nrow(bed)))
cat(paste0("False Positive: ", (nrow(bed) -length(overlaps)) / nrow(bed)))
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),2)))
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),3),'\n'))
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed)),3))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),3),'\n'))
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed)),3))
}
find_overlaps_enh(just_chromhmm,enh_regions)
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed),3)))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),3),'\n'))
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed),3)))
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[45]",label))
find_overlaps_enh(clusters,enh_regions)
just_chromhmm <- read_tsv("../chromHMM_epimap_calls/H1.bed", col_names = c("chr","pos1","pos2", 'label','x','y','z','zz','yy')) %>% subset(grepl("EnhA",label))
raw_intersects_1 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_1.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1",
"chr_loop2","pos1_loop2","pos2_loop2", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("EnhA",label))
raw_intersects_2 <- read_tsv("intersect_loop_HMM/raw_intersects_H1_2.bed", col_names = c("chr_loop1","pos1_loop1","pos2_loop1", "score",
"chr","pos1","pos2",'label','x','y','z','zz','yy')) %>% subset(grepl("EnhA",label))
raw_intersects <- rbind.data.frame(raw_intersects_1[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)],raw_intersects_2)
nmf_intersects <- read_tsv("../choose_top_results/total_network_H1.bed") %>% subset(grepl("EnhA",chromHMM_H1) & grepl("nmf[245]",nmf3D_H1))
clusters <- read_tsv("../RcppML_nmf/h1_labelled.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[245]",label))
clusters_with_chromhmm <- read_tsv("../RcppML_nmf/add_chromhmm/h1_labelled_chromhmm.bed",col_names = c('chr','pos1','pos2','label')) %>% subset(grepl("nmf[245]",label))
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/H1_enhancerAtlas.bed",col_names = c("chr","start","end",'score'))
library(GenomicRanges)
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),3),'\n'))
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed),3)))
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
enhancer_regions
length(enhancer_regions)
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),3),'\n'))
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed),3)))
cat(paste0("False Negative: ", round((length(enhancer_regions) -length(overlaps)) /length(enhancer_regions),3)))
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed),3),'\n'))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),3),'\n'))
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed),3),'\n'))
cat(paste0("False Negative: ", round((length(enhancer_regions) -length(overlaps)) /length(enhancer_regions),3)))
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
# ANNOTATION OF ENHANCERS FROM HACER DATABASE
enhancers <- read_tsv("../annotation/GROseq-H1_ESCs/GROseq-H1-HACER.tsv")
enh_regions <- GRanges(enhancers$chr,IRanges(enhancers$start,enhancers$end))
find_overlaps_enh <- function(bed, enhancer_regions) {
query_regions <- GRanges(bed$chr,IRanges(bed$pos1,bed$pos2))
overlaps <- findOverlaps(query_regions, enhancer_regions)
cat(paste0("True Positive: ",round(length(overlaps) / nrow(bed),3),'\n'))
cat(paste0("False Positive: ", round((nrow(bed) -length(overlaps)) / nrow(bed),3),'\n'))
cat(paste0("False Negative: ", round((length(enhancer_regions) -length(overlaps)) /length(enhancer_regions),3)))
}
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
find_overlaps_enh(just_chromhmm,enh_regions)
find_overlaps_enh(raw_intersects,enh_regions)
find_overlaps_enh(nmf_intersects,enh_regions)
find_overlaps_enh(clusters,enh_regions)
find_overlaps_enh(clusters_with_chromhmm,enh_regions)
